// Code generated by MockGen. DO NOT EDIT.
// Source: ./flow/types/types.go

// Package mock is a generated GoMock package.
package mock

import (
	types "github.com/BaritoLog/barito-flow/flow/types"
	sarama "github.com/Shopify/sarama"
	cluster "github.com/bsm/sarama-cluster"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKafkaFactory is a mock of KafkaFactory interface
type MockKafkaFactory struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaFactoryMockRecorder
}

// MockKafkaFactoryMockRecorder is the mock recorder for MockKafkaFactory
type MockKafkaFactoryMockRecorder struct {
	mock *MockKafkaFactory
}

// NewMockKafkaFactory creates a new mock instance
func NewMockKafkaFactory(ctrl *gomock.Controller) *MockKafkaFactory {
	mock := &MockKafkaFactory{ctrl: ctrl}
	mock.recorder = &MockKafkaFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaFactory) EXPECT() *MockKafkaFactoryMockRecorder {
	return m.recorder
}

// MakeKafkaAdmin mocks base method
func (m *MockKafkaFactory) MakeKafkaAdmin() (types.KafkaAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeKafkaAdmin")
	ret0, _ := ret[0].(types.KafkaAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeKafkaAdmin indicates an expected call of MakeKafkaAdmin
func (mr *MockKafkaFactoryMockRecorder) MakeKafkaAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeKafkaAdmin", reflect.TypeOf((*MockKafkaFactory)(nil).MakeKafkaAdmin))
}

// MakeClusterConsumer mocks base method
func (m *MockKafkaFactory) MakeClusterConsumer(groupID, topic string, initialOffset int64) (types.ClusterConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeClusterConsumer", groupID, topic, initialOffset)
	ret0, _ := ret[0].(types.ClusterConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeClusterConsumer indicates an expected call of MakeClusterConsumer
func (mr *MockKafkaFactoryMockRecorder) MakeClusterConsumer(groupID, topic, initialOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeClusterConsumer", reflect.TypeOf((*MockKafkaFactory)(nil).MakeClusterConsumer), groupID, topic, initialOffset)
}

// MakeSyncProducer mocks base method
func (m *MockKafkaFactory) MakeSyncProducer() (sarama.SyncProducer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeSyncProducer")
	ret0, _ := ret[0].(sarama.SyncProducer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeSyncProducer indicates an expected call of MakeSyncProducer
func (mr *MockKafkaFactoryMockRecorder) MakeSyncProducer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSyncProducer", reflect.TypeOf((*MockKafkaFactory)(nil).MakeSyncProducer))
}

// MakeConsumerWorker mocks base method
func (m *MockKafkaFactory) MakeConsumerWorker(name string, consumer types.ClusterConsumer) types.ConsumerWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeConsumerWorker", name, consumer)
	ret0, _ := ret[0].(types.ConsumerWorker)
	return ret0
}

// MakeConsumerWorker indicates an expected call of MakeConsumerWorker
func (mr *MockKafkaFactoryMockRecorder) MakeConsumerWorker(name, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeConsumerWorker", reflect.TypeOf((*MockKafkaFactory)(nil).MakeConsumerWorker), name, consumer)
}

// MockKafkaAdmin is a mock of KafkaAdmin interface
type MockKafkaAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaAdminMockRecorder
}

// MockKafkaAdminMockRecorder is the mock recorder for MockKafkaAdmin
type MockKafkaAdminMockRecorder struct {
	mock *MockKafkaAdmin
}

// NewMockKafkaAdmin creates a new mock instance
func NewMockKafkaAdmin(ctrl *gomock.Controller) *MockKafkaAdmin {
	mock := &MockKafkaAdmin{ctrl: ctrl}
	mock.recorder = &MockKafkaAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaAdmin) EXPECT() *MockKafkaAdminMockRecorder {
	return m.recorder
}

// RefreshTopics mocks base method
func (m *MockKafkaAdmin) RefreshTopics() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTopics")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshTopics indicates an expected call of RefreshTopics
func (mr *MockKafkaAdminMockRecorder) RefreshTopics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTopics", reflect.TypeOf((*MockKafkaAdmin)(nil).RefreshTopics))
}

// SetTopics mocks base method
func (m *MockKafkaAdmin) SetTopics(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTopics", arg0)
}

// SetTopics indicates an expected call of SetTopics
func (mr *MockKafkaAdminMockRecorder) SetTopics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopics", reflect.TypeOf((*MockKafkaAdmin)(nil).SetTopics), arg0)
}

// Topics mocks base method
func (m *MockKafkaAdmin) Topics() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topics")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Topics indicates an expected call of Topics
func (mr *MockKafkaAdminMockRecorder) Topics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockKafkaAdmin)(nil).Topics))
}

// AddTopic mocks base method
func (m *MockKafkaAdmin) AddTopic(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTopic", topic)
}

// AddTopic indicates an expected call of AddTopic
func (mr *MockKafkaAdminMockRecorder) AddTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTopic", reflect.TypeOf((*MockKafkaAdmin)(nil).AddTopic), topic)
}

// Exist mocks base method
func (m *MockKafkaAdmin) Exist(topic string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", topic)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist
func (mr *MockKafkaAdminMockRecorder) Exist(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockKafkaAdmin)(nil).Exist), topic)
}

// CreateTopic mocks base method
func (m *MockKafkaAdmin) CreateTopic(topic string, numPartitions int32, replicationFactor int16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", topic, numPartitions, replicationFactor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic
func (mr *MockKafkaAdminMockRecorder) CreateTopic(topic, numPartitions, replicationFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockKafkaAdmin)(nil).CreateTopic), topic, numPartitions, replicationFactor)
}

// Close mocks base method
func (m *MockKafkaAdmin) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockKafkaAdminMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaAdmin)(nil).Close))
}

// MockClusterConsumer is a mock of ClusterConsumer interface
type MockClusterConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterConsumerMockRecorder
}

// MockClusterConsumerMockRecorder is the mock recorder for MockClusterConsumer
type MockClusterConsumerMockRecorder struct {
	mock *MockClusterConsumer
}

// NewMockClusterConsumer creates a new mock instance
func NewMockClusterConsumer(ctrl *gomock.Controller) *MockClusterConsumer {
	mock := &MockClusterConsumer{ctrl: ctrl}
	mock.recorder = &MockClusterConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterConsumer) EXPECT() *MockClusterConsumerMockRecorder {
	return m.recorder
}

// Messages mocks base method
func (m *MockClusterConsumer) Messages() <-chan *sarama.ConsumerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].(<-chan *sarama.ConsumerMessage)
	return ret0
}

// Messages indicates an expected call of Messages
func (mr *MockClusterConsumerMockRecorder) Messages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockClusterConsumer)(nil).Messages))
}

// Notifications mocks base method
func (m *MockClusterConsumer) Notifications() <-chan *cluster.Notification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications")
	ret0, _ := ret[0].(<-chan *cluster.Notification)
	return ret0
}

// Notifications indicates an expected call of Notifications
func (mr *MockClusterConsumerMockRecorder) Notifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockClusterConsumer)(nil).Notifications))
}

// Errors mocks base method
func (m *MockClusterConsumer) Errors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors
func (mr *MockClusterConsumerMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockClusterConsumer)(nil).Errors))
}

// MarkOffset mocks base method
func (m *MockClusterConsumer) MarkOffset(msg *sarama.ConsumerMessage, metadata string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkOffset", msg, metadata)
}

// MarkOffset indicates an expected call of MarkOffset
func (mr *MockClusterConsumerMockRecorder) MarkOffset(msg, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOffset", reflect.TypeOf((*MockClusterConsumer)(nil).MarkOffset), msg, metadata)
}

// CommitOffsets mocks base method
func (m *MockClusterConsumer) CommitOffsets() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitOffsets")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitOffsets indicates an expected call of CommitOffsets
func (mr *MockClusterConsumerMockRecorder) CommitOffsets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitOffsets", reflect.TypeOf((*MockClusterConsumer)(nil).CommitOffsets))
}

// Close mocks base method
func (m *MockClusterConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClusterConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClusterConsumer)(nil).Close))
}

// MockConsumerWorker is a mock of ConsumerWorker interface
type MockConsumerWorker struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerWorkerMockRecorder
}

// MockConsumerWorkerMockRecorder is the mock recorder for MockConsumerWorker
type MockConsumerWorkerMockRecorder struct {
	mock *MockConsumerWorker
}

// NewMockConsumerWorker creates a new mock instance
func NewMockConsumerWorker(ctrl *gomock.Controller) *MockConsumerWorker {
	mock := &MockConsumerWorker{ctrl: ctrl}
	mock.recorder = &MockConsumerWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumerWorker) EXPECT() *MockConsumerWorkerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockConsumerWorker) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockConsumerWorkerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConsumerWorker)(nil).Start))
}

// Stop mocks base method
func (m *MockConsumerWorker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockConsumerWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsumerWorker)(nil).Stop))
}

// Halt mocks base method
func (m *MockConsumerWorker) Halt() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Halt")
}

// Halt indicates an expected call of Halt
func (mr *MockConsumerWorkerMockRecorder) Halt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Halt", reflect.TypeOf((*MockConsumerWorker)(nil).Halt))
}

// IsStart mocks base method
func (m *MockConsumerWorker) IsStart() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStart")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStart indicates an expected call of IsStart
func (mr *MockConsumerWorkerMockRecorder) IsStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStart", reflect.TypeOf((*MockConsumerWorker)(nil).IsStart))
}

// OnError mocks base method
func (m *MockConsumerWorker) OnError(f func(error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", f)
}

// OnError indicates an expected call of OnError
func (mr *MockConsumerWorkerMockRecorder) OnError(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockConsumerWorker)(nil).OnError), f)
}

// OnConsumerFlush mocks base method
func (m *MockConsumerWorker) OnConsumerFlush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConsumerFlush")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnConsumerFlush indicates an expected call of OnConsumerFlush
func (mr *MockConsumerWorkerMockRecorder) OnConsumerFlush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConsumerFlush", reflect.TypeOf((*MockConsumerWorker)(nil).OnConsumerFlush))
}

// OnSuccess mocks base method
func (m *MockConsumerWorker) OnSuccess(f func(*sarama.ConsumerMessage)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSuccess", f)
}

// OnSuccess indicates an expected call of OnSuccess
func (mr *MockConsumerWorkerMockRecorder) OnSuccess(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSuccess", reflect.TypeOf((*MockConsumerWorker)(nil).OnSuccess), f)
}

// OnNotification mocks base method
func (m *MockConsumerWorker) OnNotification(f func(*cluster.Notification)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNotification", f)
}

// OnNotification indicates an expected call of OnNotification
func (mr *MockConsumerWorkerMockRecorder) OnNotification(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNotification", reflect.TypeOf((*MockConsumerWorker)(nil).OnNotification), f)
}

// MockConsumerOutputFactory is a mock of ConsumerOutputFactory interface
type MockConsumerOutputFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerOutputFactoryMockRecorder
}

// MockConsumerOutputFactoryMockRecorder is the mock recorder for MockConsumerOutputFactory
type MockConsumerOutputFactoryMockRecorder struct {
	mock *MockConsumerOutputFactory
}

// NewMockConsumerOutputFactory creates a new mock instance
func NewMockConsumerOutputFactory(ctrl *gomock.Controller) *MockConsumerOutputFactory {
	mock := &MockConsumerOutputFactory{ctrl: ctrl}
	mock.recorder = &MockConsumerOutputFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumerOutputFactory) EXPECT() *MockConsumerOutputFactoryMockRecorder {
	return m.recorder
}

// MakeConsumerOutputGCS mocks base method
func (m *MockConsumerOutputFactory) MakeConsumerOutputGCS(arg0 string) (types.ConsumerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeConsumerOutputGCS", arg0)
	ret0, _ := ret[0].(types.ConsumerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeConsumerOutputGCS indicates an expected call of MakeConsumerOutputGCS
func (mr *MockConsumerOutputFactoryMockRecorder) MakeConsumerOutputGCS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeConsumerOutputGCS", reflect.TypeOf((*MockConsumerOutputFactory)(nil).MakeConsumerOutputGCS), arg0)
}

// MockConsumerOutput is a mock of ConsumerOutput interface
type MockConsumerOutput struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerOutputMockRecorder
}

// MockConsumerOutputMockRecorder is the mock recorder for MockConsumerOutput
type MockConsumerOutputMockRecorder struct {
	mock *MockConsumerOutput
}

// NewMockConsumerOutput creates a new mock instance
func NewMockConsumerOutput(ctrl *gomock.Controller) *MockConsumerOutput {
	mock := &MockConsumerOutput{ctrl: ctrl}
	mock.recorder = &MockConsumerOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumerOutput) EXPECT() *MockConsumerOutputMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockConsumerOutput) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockConsumerOutputMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConsumerOutput)(nil).Start))
}

// Stop mocks base method
func (m *MockConsumerOutput) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockConsumerOutputMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsumerOutput)(nil).Stop))
}

// OnMessage mocks base method
func (m *MockConsumerOutput) OnMessage(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnMessage indicates an expected call of OnMessage
func (mr *MockConsumerOutputMockRecorder) OnMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMessage", reflect.TypeOf((*MockConsumerOutput)(nil).OnMessage), arg0)
}

// AddOnFlushFunc mocks base method
func (m *MockConsumerOutput) AddOnFlushFunc(arg0 func() error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOnFlushFunc", arg0)
}

// AddOnFlushFunc indicates an expected call of AddOnFlushFunc
func (mr *MockConsumerOutputMockRecorder) AddOnFlushFunc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnFlushFunc", reflect.TypeOf((*MockConsumerOutput)(nil).AddOnFlushFunc), arg0)
}
